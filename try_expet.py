'==============================Exceptions============================'
# Исключение это обьекты которые прерывают работу кода если не были обработаны

SyntaxError 
# исключение которое выходит, когда в коде допущена синтакчисиская ошибка

'''
a =

SyntaxError

'''

NameError 
# исключение которое выходит, когда мы обращаемся к несуществующей переменной

'''
num1 = 15
print(num1)
NameError
'''

IndexError
# исключение которое выходит, когда мы обращаемся по несуществующему индексу

'''
list_ = [12, 20, 0, 21]
print(list_(1000))
IndexError
'''

'''
[12, 0, 24, 'hi],pop(1000)
IndexError
'''

KeyError
# это исключение, которое выходит по несуществующему ключу

"""
dict_ = {'a':1}
dict_['c']
KeyError
"""
'''
dict_ = {'a':1}
dict_.get('c') # None
ошибки не будет!!! так как get не вызывает ошибку а вернет None если такого ключа нет
'''

ValueError
# это исключение выходит, когда мы передаем в функцию не корректный для нее тип данных
# и когда мы распаковываем итерируемы обьект на несколько переменных и кол-во переменных не совпадает 

'''
int('10dfh') 
ValueError
'''

'''
a, b, c = 2, 3
ValueError
'''

TypeError
# исключение выходит, когда мы пытаемся использовать методы не свойственные какому-то типу данных
# когда мы пытаемся передать функции больше иои меньше аргументов чем принимает функция

'''
for i in 1234:
    
TypeError:
'''

'''
"5" + 5
TypeError:
'''

'''
{[1,2,3]: 'hi'}
TypeError:
'''

'''
input('Введите число', 123)
TypeError:
''' 

'''
[].append()
TypeError:
'''

AttributeError 
# выходит когда мы обращаемся к несуществующему аттрибуту или методу обьута (типа данных)
 
''' 
[1,23,1,56]


'''
# 'makers'.pop(0)
AttributeError



IndentationError
# выходит когда мы не правиьно используем отступы 

'''
    a = 5
    IndentationError
'''

'''
for i in range(11):
print(i)
IndentationError
'''

Exception
# исключение которое создали чтобы его вызывать

'=====================Вызов исключений=============================='
# raise NameError
# raise IndexError
# raise KeyError

'=======================Обработка исключений============================='
# чтобы код не прекращал свою работу мы можем использовать try-except и обрабатывать вызванное исключение
# try:
#     # код который можеть вызвать ошибку\исключение 
#     num = int(input('Введите число: '))
# except ValueError:
#     # обработку на исключение которое поймали 
#     print('Вы ввели не число')
# else:
#     # код который отработает если исключение не вышло
#     print('Вы ввели число(num)')
# finally:
#     # работает всегда 
#     print('До свидание')

# # try:
#     ...
# except:
#     ...
# finally:
#     ...

# try:
#     num = int(input('Введите число: '))
#     res = 1 / num
# except (ValueError, ZeroDivisionError):
#     print('Что-то пошло не так')




# except: обратбатывает все исключение которы могут выйти
# except Exception : обратбатывает все исключение которы могут выйти

# можем указать в except несколько исключений при помощи скобок и запятой except (ValueError, TypeError, zip)
    
 
try:
    raise NameError
except NameError:
    print(i)

'Напишите программу с помощью try-except пользователь вводит число вам нужно проверит на положительность отрицателбность и 0'
'Положительное число  должно выходить исключение Valueerror'
'Отрицательное число  должно выходить исключение TypeError'

try:
    num = int(input('Введите число: '))
    if num == 0:
        raise ZeroDivisionError  
    elif num > 0:
        raise ValueError
    elif num < 0:
        raise TypeError
except ValueError:
    print('Положительное')
except TypeError:
    print('Отрицательное')
except ZeroDivisionError:
    print('0')
    